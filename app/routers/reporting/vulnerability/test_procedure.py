# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Guardian. If not, see <https://www.gnu.org/licenses/>.

from __future__ import annotations

from uuid import UUID
from typing import Annotated, Dict, Union, List
from sqlmodel import SQLModel
from fastapi import Body, Depends, APIRouter, Security, status
from sqlalchemy import and_
from sqlalchemy.orm import Session
from core.config import API_PREFIX
from schema import get_db, TagCategoryEnum
from schema.util import (
    ApiPermissionEnum, get_all, get_by_id, StatusMessage, StatusEnum, InvalidDataError,
    update_language_fields, update_database_record
)
from schema.tagging import Tag
from schema.reporting.vulnerability.vulnerability_template import VulnerabilityTemplateRead, VulnerabilityTemplate
from schema.reporting.vulnerability.test_procedure import (
    TestProcedure, TestProcedureCreate, TestProcedureLanguage, TestProcedureRead, TestProcedureUpdate, ProcedureType
)
from routers.reporting.vulnerability.vulnerability_template import (
    API_VULNERABILITY_TEMPLATE_SUFFIX, get_vulnerability_template
)
from routers.user import get_current_active_user, User

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"

API_TEST_PROCEDURE_SUFFIX = "/test-procedures"
API_TEST_PROCEDURE_PREFIX = API_PREFIX + API_TEST_PROCEDURE_SUFFIX


router = APIRouter(
    prefix=API_TEST_PROCEDURE_PREFIX,
    tags=["test procedure"],
    responses={
        401: {"description": "Unauthorized"},
        400: {"description": "Incomplete or invalid data"},
        404: {"description": "Not found"},
        500: {"description": "Internal Server Error"}
    }
)


def post_process_test_procedure_language(session: Session,
                                         test_procedure: Union[TestProcedure, SQLModel],
                                         **kwargs: Dict[str, str]):
    """
    Process the language-specific details of a test procedure.
    """
    # Define function that creates a new language details object.
    def create_object(parent_object: SQLModel, language: SQLModel, **kwargs: Dict[str, str]):
        return TestProcedureLanguage(
            language=language,
            test_procedure=parent_object,
            **kwargs
        )
    # Create/update the language details table for the test procedure.
    update_language_fields(
        session=session,
        parent_object=test_procedure,
        create_object=create_object,
        **kwargs
    )


def check_test_procedure(procedure: Union[TestProcedureCreate, TestProcedureUpdate]):
    """
    Checks if the given test procedure is valid.
    """
    if procedure.objective is None or len(procedure.objective) == 0:
        raise InvalidDataError("Objective is required.")


def get_test_procedure(test_id: UUID, session: Annotated[Session, Depends(get_db)]) -> SQLModel:
    """
    Get a test procedure by its ID.
    """
    return get_by_id(session, TestProcedure, test_id)


def add_tags(
        session: Session,
        test_procedure: TestProcedure | TestProcedureUpdate,
        general_tags: List[UUID]
):
    """
    Updates the tags of the given test procedure.
    """
    test_procedure.general_tags = session.query(Tag) \
        .filter(and_(Tag.id.in_(general_tags),
                     Tag.categories.contains([TagCategoryEnum.procedure, TagCategoryEnum.general]))).all()


@router.get("", response_model=List[TestProcedureRead])
def read_test_procedures(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_read.name])],
    session: Annotated[Session, Depends(get_db)]
):
    """
    Returns all test procedures.
    """
    return get_all(session, TestProcedure).order_by(TestProcedure.name).all()


@router.get("/{test_id}" + API_VULNERABILITY_TEMPLATE_SUFFIX, response_model=List[VulnerabilityTemplateRead])
def read_vulnerability_tamplates_associated_with_test_procedure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_read.name])],
    test_procedure: Annotated[UUID, Depends(get_test_procedure)],
):
    """
    Returns all vulnerability templates associated with the given test procedures.
    """
    return test_procedure.vulnerabilities


@router.delete("/{test_id}", response_model=StatusMessage)
def delete_test_procedure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_delete.name])],
    test_procedure: Annotated[UUID, Depends(get_test_procedure)],
    session: Session = Depends(get_db)
):
    """
    Deletes a test procedure by its ID.
    """
    session.delete(test_procedure)
    session.commit()
    return StatusMessage(
        status=status.HTTP_200_OK,
        severity=StatusEnum.success,
        message=f"Record successfully deleted."
    )


@router.post("", response_model=TestProcedureRead)
def create_test_procedure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_create.name])],
    test_procedure: Annotated[TestProcedureCreate, Body],
    session: Session = Depends(get_db)
):
    """
    Creates a new test procedure.
    """
    try:
        check_test_procedure(test_procedure)
        # Create the test procedure
        result = TestProcedure(
            **test_procedure.model_dump(exclude={"general_tags"}),
            procedure_type=ProcedureType.penetration_test
        )
        session.add(result)
        # Create the language-specific details of the measure
        post_process_test_procedure_language(
            session,
            result,
            objective=test_procedure.objective
        )
        add_tags(
            session=session,
            test_procedure=result,
            general_tags=test_procedure.general_tags
        )
        session.commit()
        session.refresh(result)
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.post("/{test_id}" + API_VULNERABILITY_TEMPLATE_SUFFIX + "/{template_id}", response_model=None)
def add_vulnerability_template_to_test_procedures(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_update.name])],
    test_procedure: Annotated[UUID, Depends(get_test_procedure)],
    template_id: UUID,
    session: Annotated[Session, Depends(get_db)]
):
    """
    Adds a vulnerability template to a test procedure.
    """
    create = len([item for item in test_procedure.vulnerabilities if item.id == template_id]) == 0
    if create:
        template = session.query(VulnerabilityTemplate).filter_by(id=template_id).one_or_none()
        if template:
            test_procedure.vulnerabilities.append(template)
            session.commit()
    return StatusMessage(
        status=status.HTTP_200_OK,
        severity=StatusEnum.success,
        message=f"Record successfully added."
    )


@router.put("", response_model=TestProcedureRead)
def update_test_procedure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_update.name])],
    item: Annotated[TestProcedureUpdate, Body],
    session: Session = Depends(get_db)
):
    """
    Updates a test procedure.
    """
    try:
        check_test_procedure(item)
        # Update the test procedure
        result = update_database_record(
            session=session,
            source=item,
            source_model=TestProcedureUpdate,
            query_model=TestProcedure,
            commit=False,
            exclude={"general_tags"}
        )
        add_tags(
            session=session,
            test_procedure=result,
            general_tags=item.general_tags
        )
        # Update the language-specific details of the measure
        post_process_test_procedure_language(session, result, objective=item.objective)
        session.commit()
        session.refresh(result)
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.post("/{test_id}" + API_VULNERABILITY_TEMPLATE_SUFFIX, response_model=TestProcedureRead)
def add_vulnerability_templates_to_test_procedure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_create.name])],
    test_procedure: Annotated[UUID, Depends(get_test_procedure)],
    vulnerabilities: Annotated[List[UUID], Body],
    session: Session = Depends(get_db)
):
    """
    Adds multiple vulnerability templates to the test procedure.
    """
    try:
        for vulnerability_id in vulnerabilities:
            vulnerability = get_vulnerability_template(vulnerability_id, session)
            test_procedure.vulnerabilities.append(vulnerability)
        session.commit()
        session.refresh(test_procedure)
        return test_procedure
    except Exception as e:
        raise InvalidDataError(str(e))


@router.delete("/{test_id}" + API_VULNERABILITY_TEMPLATE_SUFFIX + "/{template_id}", response_model=None)
def remove_vulnerability_template_from_test_procedure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.test_procedure_update.name])],
    test_procedure: Annotated[UUID, Depends(get_test_procedure)],
    template_id: UUID,
    session: Annotated[Session, Depends(get_db)]
):
    """
    Removes the given vulnerability template from the given test procedure.
    """
    try:
        vulnerability = [item for item in test_procedure.vulnerabilities if item.id == template_id]
        if vulnerability:
            test_procedure.vulnerabilities.remove(vulnerability[0])
            session.commit()
        return StatusMessage(
            status=status.HTTP_200_OK,
            severity=StatusEnum.success,
            message=f"Record successfully deleted."
        )
    except Exception as e:
        raise InvalidDataError(str(e))
