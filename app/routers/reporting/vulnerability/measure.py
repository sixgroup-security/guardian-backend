# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Guardian. If not, see <https://www.gnu.org/licenses/>.

from __future__ import annotations

import logging
import uuid
from uuid import UUID
from typing import Annotated, List, Dict, Union, Set
from sqlmodel import SQLModel
from fastapi import Body, Depends, APIRouter, Security, status
from sqlalchemy import or_, and_
from sqlalchemy.orm import Session
from core.config import API_PREFIX
from schema import get_db, TagCategoryEnum
from schema.util import (
    get_by_id, update_database_record, StatusMessage, StatusEnum, ProjectType, InvalidDataError,
    update_language_fields, ApiPermissionEnum, NotFoundError
)
from schema.tagging import Tag
from schema.reporting.vulnerability.measure import (
    Measure, MeasureCreate, MeasureRead, MeasureUpdate, MeasureLookup, MeasureLanguage
)
from routers.user import User, get_current_active_user, get_logger

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"

API_MEASURE_SUFFIX = "/measures"
API_MEASURE_PREFIX = API_PREFIX + API_MEASURE_SUFFIX


router = APIRouter(
    prefix=API_MEASURE_PREFIX,
    tags=["measure"],
    responses={
        401: {"description": "Unauthorized"},
        400: {"description": "Incomplete or invalid data"},
        404: {"description": "Not found"},
        500: {"description": "Internal Server Error"}
    }
)


def post_process_measure_language(session: Session,
                                  measure: Measure,
                                  **kwargs: Dict[str, str]):
    """
    Process the language-specific details of a measure.
    """
    # Define function that creates a new language details object.
    def create_object(parent_object: SQLModel, language: SQLModel, **kwargs: Dict[str, str]):
        return MeasureLanguage(
            language=language,
            measure=parent_object,
            **kwargs
        )
    # Create/update the language details table for the measure.
    update_language_fields(
        session=session,
        parent_object=measure,
        create_object=create_object,
        **kwargs
    )


def check_measure(measure: Union[MeasureCreate, MeasureUpdate]):
    """
    Checks if the given measure is valid.
    """
    if measure.recommendation is None or len(measure.recommendation) == 0:
        raise InvalidDataError(ValueError("Recommendation is required."))


def get_measure_by_id(measure_id: UUID, session: Annotated[Session, Depends(get_db)]) -> SQLModel:
    """
    Get a measure by its ID.
    """
    return get_by_id(session, Measure, measure_id)


def get_measures(session: Session, project_types: Set[ProjectType]) -> List[Measure]:
    """
    Method returns all measures for specific project types.
    """
    conditions = or_(*[Measure.project_types.contains([project_type]) for project_type in project_types])
    return session.query(Measure).filter(conditions).order_by(Measure.name).all()


def add_tags(
        session: Session,
        measure: Measure | MeasureUpdate,
        general_tags: List[uuid.UUID]
):
    """
    Updates the tags of the given measures.
    """
    measure.general_tags = session.query(Tag) \
        .filter(and_(Tag.id.in_(general_tags),
                     Tag.categories.contains([TagCategoryEnum.measure, TagCategoryEnum.general]))).all()


@router.get("", response_model=List[MeasureRead])
def read_measures(
    _: Annotated[User, Security(
        get_current_active_user,
        scopes=[
            ApiPermissionEnum.measure_read.name,
            ApiPermissionEnum.pentest_report_read.name
        ]
    )],
    session: Annotated[Session, Depends(get_db)]
):
    """
    Returns all measures.
    """
    return get_measures(session, set([item for item in ProjectType]))


@router.get("/pentest/lookup", response_model=List[MeasureLookup])
def read_measures_summary(
    _: Annotated[User, Security(
        get_current_active_user,
        scopes=[
            ApiPermissionEnum.measure_read.name,
            ApiPermissionEnum.pentest_report_read.name
        ]
    )],
    session: Annotated[Session, Depends(get_db)]
):
    """
    Returns a summary for all penetration testing measures.
    """
    return get_measures(session, {ProjectType.penetration_test})


@router.delete("/{measure_id}", response_model=StatusMessage)
def delete_measure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.measure_delete.name])],
    measure: Annotated[UUID, Depends(get_measure_by_id)],
    session: Session = Depends(get_db)
):
    """
    Deletes a measure by its ID.
    """
    session.delete(measure)
    session.commit()
    return StatusMessage(
        status=status.HTTP_200_OK,
        severity=StatusEnum.success,
        message=f"Record successfully deleted."
    )


@router.post("", response_model=MeasureRead)
def create_measure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.measure_create.name])],
    measure: Annotated[MeasureCreate, Body],
    session: Session = Depends(get_db)
):
    """
    Creates a new measure.
    """
    try:
        check_measure(measure)
        # Create the measure
        result = Measure(**measure.model_dump(exclude={"general_tags"}))
        add_tags(
            session=session,
            measure=result,
            general_tags=measure.general_tags
        )
        session.add(result)
        # Create the language-specific details of the measure
        post_process_measure_language(session, result, recommendation=measure.recommendation)
        session.commit()
        session.refresh(result)
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.put("", response_model=MeasureRead)
def update_measure(
    _: Annotated[User, Security(get_current_active_user, scopes=[ApiPermissionEnum.measure_update.name])],
    logger: Annotated[logging.Logger, Depends(get_logger)],
    item: Annotated[MeasureUpdate, Body],
    session: Session = Depends(get_db)
):
    """
    Updates a measure by its ID.
    """
    try:
        check_measure(item)
        # Update the measure
        result = update_database_record(
            session=session,
            source=item,
            source_model=MeasureUpdate,
            query_model=Measure,
            commit=False,
            exclude={"general_tags"}
        )
        add_tags(
            session=session,
            measure=result,
            general_tags=item.general_tags
        )
        # Update the language-specific details of the measure
        post_process_measure_language(session, result, recommendation=item.recommendation)
        session.commit()
        session.refresh(result)
        return result
    except NotFoundError as ex:
        logger.exception(ex)
        return item
    except Exception as e:
        raise InvalidDataError(str(e))
