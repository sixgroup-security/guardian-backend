# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Guardian. If not, see <https://www.gnu.org/licenses/>.

from __future__ import annotations

import uuid
from uuid import UUID
from typing import Annotated, Callable, Any
from fastapi import Body, Depends, APIRouter, Security, Response, status
from sqlalchemy.orm import Session
from schema import get_db
from schema.util import ApiPermissionEnum, update_attributes, StatusMessage, StatusEnum, InvalidDataError, ProjectType
from schema.project import ProjectState, Project
from schema.reporting.report import (
    Report, ReportCreate, ReportUpdate, ReportMainRead, ReportGeneralRead, ReportOverviewRead, ReportTestingRead
)
from schema.reporting.report_language import ReportLanguage
from schema.reporting.report_template import ReportTemplate
from routers.user import get_current_active_user, User
from routers.project import API_PROJECT_PREFIX, check_access_permission, get_project
from core import DataNotFoundError
from . import get_file_name, download_pdf, download_xlsx, return_pdf

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"

# API_PENTEST_REPORT_SUFFIX = "/{project_id}/pentest-reports"
API_PENTEST_REPORT_SUFFIX = "/{project_id}/reports"
API_PENTEST_REPORT_PREFIX = API_PROJECT_PREFIX + API_PENTEST_REPORT_SUFFIX

router = APIRouter(
    prefix=API_PENTEST_REPORT_PREFIX,
    tags=["report"],
    responses={
        401: {"description": "Unauthorized"},
        400: {"description": "Incomplete or invalid data"},
        404: {"description": "Not found"},
        500: {"description": "Internal Server Error"}
    }
)


def get_final_report_version(
        user: User,
        project: Project,
        report_id: UUID
):
    """
    Generic function for obtaining the latest version of the final report in the desired format (e.g., PDF).
    """
    check_access_permission(user, project)
    if report := project.get_report(report_id):
        if version := report.get_latest_final_version():
            return version
        else:
            raise DataNotFoundError()
    else:
        raise DataNotFoundError()


def deliver_last_final_report_file(
        user: User,
        project: Project,
        report_id: uuid.UUID,
        delivery_fn: Callable[[Any, str], Response],

) -> Response:
    """
    Generic method that allows downloading the latest version of the final report in the desired format.
    """
    try:
        if project.state != ProjectState.completed:
            raise InvalidDataError("Project is not in final state.")
        version = get_final_report_version(
            user=user,
            project=project,
            report_id=report_id
        )
        file_name = get_file_name(version)
        return delivery_fn(version, file_name)
    except Exception as e:
        raise InvalidDataError(str(e))


@router.delete("/{report_id}", response_model=StatusMessage)
def delete_pentest_report(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_delete.name])],
    report_id: UUID,
    project: Annotated[UUID, Depends(get_project)],
    session: Session = Depends(get_db)
):
    """
    Deletes a penetration testing report by its ID.
    """
    check_access_permission(current_user, project)
    if report := project.get_report(report_id):
        session.delete(report)
        session.commit()
    return StatusMessage(
        status=status.HTTP_200_OK,
        severity=StatusEnum.success,
        message=f"Record successfully deleted."
    )


@router.post("", response_model=StatusMessage)
def create_pentest_report(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_create.name])],
    project: Annotated[UUID, Depends(get_project)],
    report: Annotated[ReportCreate, Body],
    session: Session = Depends(get_db)
):
    """
    Creates a new penetration testing report.
    """
    check_access_permission(current_user, project)
    try:
        if len(project.reports) > 0:
            raise InvalidDataError("Project has already a report.")
        if project.project_type != ProjectType.penetration_test:
            raise InvalidDataError(
                f"Cannot create penetration testing report for project of type {project.project_type.name}"
            )
        template = session.query(ReportTemplate).filter_by(id=report.report_template_id).first()
        language = session.query(ReportLanguage).filter_by(id=report.report_language_id).first()
        if not template:
            raise InvalidDataError("Provided report template is invalid.")
        if not language:
            raise InvalidDataError("Provided report language is invalid.")
        new = Report(
            **report.model_dump(),
            version=template.version,
            executive_summary=template.get_executive_summary(language),
            prefix_section_text=template.get_prefix_section_text(language),
            postfix_section_text=template.get_postfix_section_text(language),
            project_id=project.id
        )
        session.add(new)
        session.commit()
        return StatusMessage(
            status=status.HTTP_200_OK,
            severity=StatusEnum.success,
            message=f"Report successfully created."
        )
    except Exception as e:
        raise InvalidDataError(str(e))


@router.put("/{report_id}/main", response_model=StatusMessage)
def update_pentest_report(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_update.name])],
    project_id: UUID,
    item: Annotated[ReportUpdate, Body],
    session: Session = Depends(get_db)
):
    """
    Updates a penetration testing report's main content (executive summary, introduction, etc.).
    """
    project = session.query(Project).filter_by(id=project_id).first()
    check_access_permission(current_user, project)
    try:
        if result := project.get_report(item.id):
            update_attributes(target=result, source=item, source_model=ReportUpdate)
            session.add(result)
            session.commit()
            return StatusMessage(
                status=status.HTTP_200_OK,
                severity=StatusEnum.success,
                message=f"Report successfully updated."
            )
    except Exception as e:
        raise InvalidDataError(str(e))


@router.get("/{report_id}/main", response_model=ReportMainRead)
def read_pentest_report(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_read.name])],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Returns a penetration testing report's main section data.
    """
    check_access_permission(current_user, project)
    try:
        if not (result := project.get_report(report_id)):
            raise DataNotFoundError()
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.get("/{report_id}/general", response_model=ReportGeneralRead)
def read_pentest_report_general(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_read.name])],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Returns a penetration testing report's project information.
    """
    check_access_permission(current_user, project)
    try:
        if not (result := project.get_report(report_id)):
            raise DataNotFoundError()
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.get("/{report_id}/overview", response_model=ReportOverviewRead)
def read_pentest_report_overview(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_read.name])],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Returns a penetration testing report's overview information.
    """
    check_access_permission(current_user, project)
    try:
        if not (result := project.get_report(report_id)):
            raise DataNotFoundError()
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.get("/{report_id}/testing", response_model=ReportTestingRead)
def read_pentest_report(
    current_user: Annotated[User, Security(get_current_active_user,
                                           scopes=[ApiPermissionEnum.pentest_report_read.name])],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Returns a penetration testing report's structure.
    """
    check_access_permission(current_user, project)
    try:
        if not (result := project.get_report(report_id)):
            raise DataNotFoundError()
        return result
    except Exception as e:
        raise InvalidDataError(str(e))


@router.get("/{report_id}/pdfview")
def view_final_pentest_report_pdf(
    current_user: Annotated[User, Security(
        get_current_active_user,
        scopes=[ApiPermissionEnum.pentest_report_read_latest_final_pdf.name]
    )],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Views the latest version of the final report as PDF.
    """
    return deliver_last_final_report_file(
        user=current_user,
        project=project,
        report_id=report_id,
        delivery_fn=return_pdf
    )


@router.get("/{report_id}/pdf")
def download_final_pentest_report_pdf(
    current_user: Annotated[User, Security(
        get_current_active_user,
        scopes=[ApiPermissionEnum.pentest_report_read_latest_final_pdf.name]
    )],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Downloads the latest version of the final report as PDF.
    """
    return deliver_last_final_report_file(
        user=current_user,
        project=project,
        report_id=report_id,
        delivery_fn=download_pdf
    )


@router.get("/{report_id}/xlsx")
def download_final_pentest_report_xlsx(
    current_user: Annotated[User, Security(
        get_current_active_user,
        scopes=[ApiPermissionEnum.pentest_report_read_latest_final_xlsx.name]
    )],
    project: Annotated[UUID, Depends(get_project)],
    report_id: UUID
):
    """
    Downloads the latest version of the final report as Microsoft Excel.
    """
    return deliver_last_final_report_file(
        user=current_user,
        project=project,
        report_id=report_id,
        delivery_fn=download_xlsx
    )
