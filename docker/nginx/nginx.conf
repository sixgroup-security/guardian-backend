events {
  worker_connections  1024;
}

http {
    server_tokens off;

    server {
        listen 8000;
        # listen 443 ssl http2;

        server_name localhost;

        # TLS config
        # ssl_certificate /etc/nginx/ssl/nginx.crt;
        # ssl_certificate_key /etc/nginx/ssl/nginx.key;
        # include /etc/nginx/includes/ssl.conf;

        # Security headers
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header Content-Security-Policy "default-src 'none'; script-src 'self' 'unsafe-eval'; connect-src 'self' ws:; img-src 'self'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; frame-src 'self'; frame-ancestors 'self' require-trusted-types-for 'script'" always;
        add_header X-Content-Type-Options nosniff always;
        add_header Referrer-Policy "no-referrer" always;

        location / {
            include /etc/nginx/includes/proxy.conf;
            # proxy_pass http://frontend:5173;
	        proxy_pass http://host.docker.internal:3000;
        }

        location /api {
            include /etc/nginx/includes/proxy.conf;
            # proxy_pass http://backend:8000/api;
            proxy_pass http://host.docker.internal:8090/api;
        }

        location /api/ws {
            include /etc/nginx/includes/proxy.conf;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            # proxy_pass http://backend:8000/api;
            proxy_pass http://host.docker.internal:8090/api/ws;
        }

        location /idp {
            include /etc/nginx/includes/proxy.conf;
            proxy_pass http://idp:8080/idp;
        }

        access_log off;
        error_log /var/log/nginx/error.log error;
    }
}