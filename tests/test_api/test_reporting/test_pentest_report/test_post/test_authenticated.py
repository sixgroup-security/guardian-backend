# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import pytest
from fastapi import status
from schema.util import GuardianRoleEnum
from schema.reporting.report import Report
from schema.reporting.report_template import ReportTemplate

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.mark.parametrize("user_name", [item.name for item in GuardianRoleEnum])
# @pytest.mark.parametrize("user_name", [GuardianRoleEnum.admin.name])
def test_post_report(
        db_session,
        create_project_fixture,
        create_report_template_fixture,
        pentest_report_create_permission_fixture,
        get_report_fixture,
        post_pentest_report_fixture,
        delete_pentest_report_fixture,
        user_name
):
    """
    Tests that an authenticated user can create a new measure.
    """
    # Check if the user has the required permission
    if pentest_report_create_permission_fixture(user_name=user_name):
        # Set up the database
        session = db_session[0]
        project = create_project_fixture(session)
        report_template = create_report_template_fixture(session)
        report_language = report_template.multi_language_fields[0].language
        # Create the report
        report = get_report_fixture(
            project_id=project.id,
            report_template_id=report_template.id,
            report_language_id=report_language.id
        )
        response = post_pentest_report_fixture(user_name=user_name, project_id=project.id, data=report)
        assert response.status_code == status.HTTP_200_OK
        report_result = session.query(Report).filter_by(id=response.json()["id"]).one()
        template_result = session.query(ReportTemplate).filter_by(id=report_template.id).one()
        # Check the response content
        assert report_result.project_id == project.id
        assert report_result.report_template_id == template_result.id
        assert report_result.report_language_id == report_language.id
        assert report_result.executive_summary == report_template.get_executive_summary(report_language)
        assert report_result.prefix_section_text == report_template.get_prefix_section_text(report_language)
        assert report_result.postfix_section_text == report_template.get_postfix_section_text(report_language)
        # Clean up the database
        delete_pentest_report_fixture(
            user_name=GuardianRoleEnum.admin.name,
            project_id=project.id,
            report_id=report_result.id
        ).raise_for_status()
        session.delete(project)
        session.delete(report_template)
        session.commit()
