# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import pytest
from datetime import datetime, date
from schema.project import ProjectState, ProjectType
from dateutil.relativedelta import relativedelta

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.mark.parametrize("project_type", list(ProjectType))
@pytest.mark.parametrize("pentest_periodicity", [None, 24])
def test_set_completion_date_1(applicationproject_fixture,
                               project_type,
                               pentest_periodicity):
    """
    The database trigger should update the application.last_pentest date
    if the project is set to complete at a later time.
    """
    today = datetime.now().date()
    session, nested, project, application = applicationproject_fixture(
        project_type=project_type,
        project_state=ProjectState.backlog,
        pentest_periodicity=pentest_periodicity,
        completion_date=None
    )
    # Change the project state to completed
    project.state = ProjectState.completed
    session.add(project)
    # Update the database
    nested.commit()
    session.refresh(project)
    session.refresh(application)
    assert project.state == ProjectState.completed
    assert project.completion_date == today
    assert application.pentest_periodicity == pentest_periodicity
    if project_type == ProjectType.penetration_test:
        assert application.last_pentest == today
        assert application.next_pentest == (project.completion_date +
                                            relativedelta(months=pentest_periodicity) if pentest_periodicity else None)
    else:
        assert application.last_pentest is None
        assert application.next_pentest is None


@pytest.mark.parametrize("source_project_type", [ProjectType.penetration_test, ProjectType.security_assessment])
@pytest.mark.parametrize("target_project_type", [ProjectType.bug_bounty, ProjectType.attack_modelling])
@pytest.mark.parametrize("completion_date", [date(2023, 10, 21), date(2024, 1, 12)])
@pytest.mark.parametrize("pentest_periodicity", [None, 24])
def test_set_completion_date_2(applicationproject_fixture,
                               project_type,
                               source_project_type,
                               target_project_type,
                               completion_date,
                               pentest_periodicity):
    """
    The database trigger should set the application.last_pentest date back to NULL if a completed project's type is
    moved from penetration test or security assessment to any other type.
    """
    session, nested, project, application = applicationproject_fixture(
        project_type=project_type,
        project_state=ProjectState.completed,
        completion_date=completion_date,
        pentest_periodicity=pentest_periodicity
    )
    # Change the project type to completed
    project.project_type = target_project_type
    session.add(project)
    # Update the database
    nested.commit()
    session.refresh(project)
    session.refresh(application)
    # Check results
    assert project.completion_date == completion_date
    assert application.last_pentest is None
    assert application.next_pentest is None


@pytest.mark.parametrize("source_project_type", [ProjectType.bug_bounty, ProjectType.attack_modelling])
@pytest.mark.parametrize("target_project_type", [ProjectType.penetration_test, ProjectType.security_assessment])
@pytest.mark.parametrize("completion_date", [date(2023, 10, 21), date(2024, 1, 12)])
@pytest.mark.parametrize("pentest_periodicity", [None, 24])
def test_set_completion_date_2(applicationproject_fixture,
                               source_project_type,
                               target_project_type,
                               completion_date,
                               pentest_periodicity):
    """
    The database trigger should set the application.last_pentest date back to NULL if a completed project's type is
    moved from penetration test or security assessment to any other type.
    """
    session, nested, project, application = applicationproject_fixture(
        project_type=source_project_type,
        project_state=ProjectState.completed,
        completion_date=completion_date,
        pentest_periodicity=pentest_periodicity
    )
    # Change the project type to completed
    project.project_type = target_project_type
    session.add(project)
    # Update the database
    nested.commit()
    session.refresh(project)
    session.refresh(application)
    # Check results
    assert project.completion_date == completion_date
    if target_project_type == ProjectType.penetration_test:
        assert application.last_pentest == project.completion_date
        assert application.next_pentest == (project.completion_date +
                                            relativedelta(months=pentest_periodicity) if pentest_periodicity else None)
    else:
        raise ValueError("Invalid project type")
