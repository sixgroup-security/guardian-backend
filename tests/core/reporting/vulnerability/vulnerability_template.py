# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import json
import pytest
from typing import Dict, List
from fastapi import Response
from routers.reporting.vulnerability.vulnerability_template import API_VULNERABILITY_TEMPLATE_PREFIX
from schema.reporting import TemplateStatus
from schema.util import ApiPermissionEnum
from schema.reporting.vulnerability.vulnerability_template import (
    VulnerabilityTemplate,
    VulnerabilityTemplateCreate,
    VulnerabilityTemplateUpdate
)
from schema.reporting.report_language import ReportLanguage
from test_api import TEST_USERS, client
from sqlalchemy.orm import Session

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.fixture
def get_vulnerability_template_fixture(db_session):
    """
    Fixture factory/closure that provides a function to create a new vulnerability template.
    """
    def _create_vulnerability_template(
            references: str | None = None,
            status: TemplateStatus | None = None,
            automate: bool | None = None,
            title: Dict[str, str] | None = None,
            description: Dict[str, str] | None = None,
            observation: Dict[str, str] | None = None,
            vrt_category_id: uuid.UUID | None | None = None,
            cwe_category_id: uuid.UUID | None | None = None,
            owasp_top_ten_id: uuid.UUID | None | None = None
    ) -> List[Dict]:
        result = []
        for report_language in db_session[0].query(ReportLanguage).all():
            result.append({
                "references": references if references else str(uuid.uuid4()),
                "status": status if status else TemplateStatus.final,
                "automate": automate if automate else False,
                "title": title if title else {report_language.language_code: str(uuid.uuid4())},
                "description": description if description else {report_language.language_code: str(uuid.uuid4())},
                "observation": observation if observation else {report_language.language_code: str(uuid.uuid4())},
                "vrt_category_id": vrt_category_id,
                "owasp_top_ten_id": owasp_top_ten_id
            })
        return result
    yield _create_vulnerability_template


@pytest.fixture
def create_vulnerability_template_fixture():
    """
    Fixture factory/closure that creates a new vulnerability template in the database.
    """
    def _create_vulnerability_template(
            session: Session,
            **kwargs
    ) -> VulnerabilityTemplate:
        raise NotImplementedError()
    yield _create_vulnerability_template


@pytest.fixture
def vulnerability_template_read_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_read])
    yield _permission_fixture


@pytest.fixture
def vulnerability_template_create_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_create])
    yield _permission_fixture


@pytest.fixture
def vulnerability_template_update_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_update])
    yield _permission_fixture


@pytest.fixture
def vulnerability_template_delete_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_delete])
    yield _permission_fixture


@pytest.fixture
def post_vulnerability_template_fixture():
    """
    Fixture factory/closure that creates a new vulnerability template via the REST API.
    """
    def _post_vulnerability_template_fixture(user_name: str | None, data: Dict) -> Response:
        vulnerability_template = VulnerabilityTemplateCreate.model_validate(data)
        payload = json.loads(vulnerability_template.json(by_alias=True))
        response = client.post(
            API_VULNERABILITY_TEMPLATE_PREFIX,
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _post_vulnerability_template_fixture


@pytest.fixture
def put_vulnerability_template_fixture(db_session):
    """
    Fixture factory/closure that updates an existing vulnerability template via the REST API.
    """
    def _put_vulnerability_template_fixture(user_name: str | None, data: Dict) -> Response:
        vulnerability_template = VulnerabilityTemplateUpdate(**data)
        payload = json.loads(vulnerability_template.json(by_alias=True))
        response = client.put(
            API_VULNERABILITY_TEMPLATE_PREFIX,
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _put_vulnerability_template_fixture


@pytest.fixture
def delete_vulnerability_template_fixture():
    """
    Fixture factory/closure that deletes a vulnerability template via the REST API.
    """
    def _delete_vulnerability_template_fixture(user_name: str | None, vulnerability_template_id: uuid.UUID) -> Response:
        response = client.delete(
            API_VULNERABILITY_TEMPLATE_PREFIX + f"/{vulnerability_template_id}",
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None
        )
        return response
    yield _delete_vulnerability_template_fixture
