# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import json
import pytest
from typing import List, Dict, Any
from fastapi import Response
from routers.reporting.vulnerability.rating import API_RATING_PREFIX
from schema import SeverityType
from schema.util import ApiPermissionEnum
from schema.reporting.vulnerability.rating import RatingCreate, RatingUpdate
from schema.reporting.vulnerability.vulnerability_template import (VulnerabilityTemplate)
from schema.reporting.report_language import ReportLanguage
from test_api import TEST_USERS, client
from sqlalchemy.orm import Session

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.fixture
def get_vulnerability_template_rating_fixture(db_session):
    """
    Fixture factory/closure that provides a function to create a new vulnerability template rating.
    """
    def _create_vulnerability_template_rating(
            cvss_score: float | None = None,
            cvss_vector: str | None = None,
            severity: SeverityType | None = None,
            name: str | None = None,
            comment: str | None = None
    ) -> List[Dict[str, Any]]:
        result = []
        for report_language in db_session[0].query(ReportLanguage).all():
            result.append({
                "cvss_score": cvss_score if cvss_score else 4.2,
                "cvss_vector": cvss_vector if cvss_vector else "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:N/SC:N/SI:N/SA:N",
                "severity": severity if severity else SeverityType.medium,
                "name": name if name else str(uuid.uuid4()),
                "comment": comment if comment else {report_language.language_code: str(uuid.uuid4())}
            })
        return result
    yield _create_vulnerability_template_rating


@pytest.fixture
def create_vulnerability_template_rating_fixture():
    """
    Fixture factory/closure that creates a new vulnerability template rating in the database.
    """
    def _create_vulnerability_template_rating(
            session: Session,
            **kwargs
    ) -> VulnerabilityTemplate:
        raise NotImplementedError()
    yield _create_vulnerability_template_rating


@pytest.fixture
def vulnerability_template_rating_read_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_read])
    yield _permission_fixture


@pytest.fixture
def vulnerability_template_rating_create_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_create])
    yield _permission_fixture


@pytest.fixture
def vulnerability_template_rating_update_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_update])
    yield _permission_fixture


@pytest.fixture
def vulnerability_template_rating_delete_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.vulnerability_template_delete])
    yield _permission_fixture


@pytest.fixture
def post_vulnerability_template_rating_fixture():
    """
    Fixture factory/closure that creates a new vulnerability template rating via the REST API.
    """
    def _post_vulnerability_template_rating_fixture(
            vulnerability_template_id: uuid.UUID,
            user_name: str | None,
            data: Dict
    ) -> Response:
        rating = RatingCreate.model_validate(data)
        payload = json.loads(rating.json(by_alias=True))
        response = client.post(
            API_RATING_PREFIX.format(template_id=vulnerability_template_id),
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _post_vulnerability_template_rating_fixture


@pytest.fixture
def put_vulnerability_template_rating_fixture(db_session):
    """
    Fixture factory/closure that updates an existing vulnerability template rating via the REST API.
    """
    def _put_vulnerability_template_rating_fixture(
            vulnerability_template_id: uuid.UUID,
            user_name: str | None,
            data: Dict
    ) -> Response:
        rating = RatingUpdate(**data)
        payload = json.loads(rating.json(by_alias=True))
        response = client.put(
            API_RATING_PREFIX.format(template_id=vulnerability_template_id),
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _put_vulnerability_template_rating_fixture


@pytest.fixture
def delete_vulnerability_template_rating_fixture():
    """
    Fixture factory/closure that deletes a vulnerability template rating via the REST API.
    """
    def _delete_vulnerability_template_rating_fixture(
            user_name: str | None,
            rating_id: uuid.UUID
    ) -> Response:
        response = client.delete(
            API_RATING_PREFIX + f"/{rating_id}",
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None
        )
        return response
    yield _delete_vulnerability_template_rating_fixture
