# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import json
import pytest
from typing import Dict, List
from fastapi import Response
from routers.reporting.vulnerability.playbook import API_PENTEST_PLAYBOOKS_PREFIX
from schema.reporting import TemplateStatus
from schema.util import ApiPermissionEnum
from schema.reporting.vulnerability.playbook import (
    Playbook, PlaybookCreate, PlaybookUpdate
)
from schema.reporting.report_language import ReportLanguage
from test_api import TEST_USERS, client
from sqlalchemy.orm import Session

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.fixture
def get_playbook_fixture(db_session):
    """
    Fixture factory/closure that provides a function to create a new playbook.
    """
    def _create_playbook(
            name: str | None = None,
            status: TemplateStatus | None = None,
            title: Dict[str, str] | None = None,
            description: Dict[str, str] | None = None,
            structure: List[Dict] | None = None
    ) -> List[Dict]:
        result = []
        for report_language in db_session[0].query(ReportLanguage).all():
            result.append({
                "name": name if name else str(uuid.uuid4()),
                "status": status if status else TemplateStatus.final,
                "title": title if title else {report_language.language_code: str(uuid.uuid4())},
                "description": description if description else {report_language.language_code: str(uuid.uuid4())},
                "structure": structure
            })
        return result
    yield _create_playbook


@pytest.fixture
def create_playbook_fixture():
    """
    Fixture factory/closure that creates a new playbook in the database.
    """
    def _create_playbook(
            session: Session,
            **kwargs
    ) -> Playbook:
        raise NotImplementedError()
    yield _create_playbook


@pytest.fixture
def playbook_read_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.playbook_read])
    yield _permission_fixture


@pytest.fixture
def playbook_create_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.playbook_create])
    yield _permission_fixture


@pytest.fixture
def playbook_update_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.playbook_update])
    yield _permission_fixture


@pytest.fixture
def playbook_delete_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.playbook_delete])
    yield _permission_fixture


@pytest.fixture
def post_playbook_fixture():
    """
    Fixture factory/closure that creates a new playbook via the REST API.
    """
    def _post_playbook_fixture(user_name: str | None, data: Dict) -> Response:
        playbook = PlaybookCreate.model_validate(data)
        payload = json.loads(playbook.json(by_alias=True))
        response = client.post(
            API_PENTEST_PLAYBOOKS_PREFIX,
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _post_playbook_fixture


@pytest.fixture
def put_playbook_fixture(db_session):
    """
    Fixture factory/closure that updates an existing playbook via the REST API.
    """
    def _put_playbook_fixture(user_name: str | None, data: Dict) -> Response:
        playbook = PlaybookUpdate(**data)
        payload = json.loads(playbook.json(by_alias=True))
        response = client.put(
            API_PENTEST_PLAYBOOKS_PREFIX,
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _put_playbook_fixture


@pytest.fixture
def delete_playbook_fixture():
    """
    Fixture factory/closure that deletes a playbook via the REST API.
    """
    def _delete_playbook_fixture(user_name: str | None, playbook_id: uuid.UUID) -> Response:
        response = client.delete(
            API_PENTEST_PLAYBOOKS_PREFIX + f"/{playbook_id}",
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None
        )
        return response
    yield _delete_playbook_fixture
