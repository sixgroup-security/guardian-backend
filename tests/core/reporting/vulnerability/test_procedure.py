# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import json
import pytest
from typing import Dict, List
from fastapi import Response
from routers.reporting.file.test_procedure import API_TEMPLATE_FILE_PREFIX, API_FILE_SUFFIX
from routers.reporting.vulnerability.test_procedure import API_TEST_PROCEDURE_PREFIX
from schema.util import ApiPermissionEnum
from schema.reporting.vulnerability.test_procedure import (
    TestProcedure,
    TestProcedureCreate,
    TestProcedureUpdate
)
from schema.reporting.report_language import ReportLanguage
from test_api import TEST_USERS, client
from sqlalchemy.orm import Session

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.fixture
def get_test_procedure_fixture(db_session):
    """
    Fixture factory/closure that provides a function to create a new test procedure.
    """
    def _create_test_procedure(
            name: str | None = None,
            hints: str | None = None,
            objective: Dict[str, str] | None = None
    ) -> List[Dict]:
        result = []
        for report_language in db_session[0].query(ReportLanguage).all():
            result.append({
                "name": name if name else str(uuid.uuid4()),
                "hints": hints if hints else str(uuid.uuid4()),
                "objective": objective if objective else {report_language.language_code: str(uuid.uuid4())},
            })
        return result
    yield _create_test_procedure


@pytest.fixture
def create_test_procedure_fixture():
    """
    Fixture factory/closure that creates a new test procedure in the database.
    """
    def _create_test_procedure(
            session: Session,
            **kwargs
    ) -> TestProcedure:
        raise NotImplementedError()
    yield _create_test_procedure


@pytest.fixture
def test_procedure_read_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.test_procedure_read])
    yield _permission_fixture


@pytest.fixture
def test_procedure_create_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.test_procedure_create])
    yield _permission_fixture


@pytest.fixture
def test_procedure_update_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.test_procedure_update])
    yield _permission_fixture


@pytest.fixture
def test_procedure_delete_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.test_procedure_delete])
    yield _permission_fixture


@pytest.fixture
def post_test_procedure_fixture():
    """
    Fixture factory/closure that creates a new test procedure via the REST API.
    """
    def _post_test_procedure_fixture(user_name: str | None, data: Dict) -> Response:
        test_procedure = TestProcedureCreate.model_validate(data)
        payload = json.loads(test_procedure.json(by_alias=True))
        response = client.post(
            API_TEST_PROCEDURE_PREFIX,
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _post_test_procedure_fixture


@pytest.fixture
def put_test_procedure_fixture(db_session):
    """
    Fixture factory/closure that updates an existing test procedure via the REST API.
    """
    def _put_test_procedure_fixture(user_name: str | None, data: Dict) -> Response:
        test_procedure = TestProcedureUpdate(**data)
        payload = json.loads(test_procedure.json(by_alias=True))
        response = client.put(
            API_TEST_PROCEDURE_PREFIX,
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _put_test_procedure_fixture


@pytest.fixture
def delete_test_procedure_fixture():
    """
    Fixture factory/closure that deletes a test procedure via the REST API.
    """
    def _delete_test_procedure_fixture(user_name: str | None, test_procedure_id: uuid.UUID) -> Response:
        response = client.delete(
            API_TEST_PROCEDURE_PREFIX + f"/{test_procedure_id}",
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None
        )
        return response
    yield _delete_test_procedure_fixture


@pytest.fixture
def post_test_procedure_file_fixture(
        upload_png_fixture
):
    """
    Fixture factory/closure that uploads a new test procedure file via the REST API.
    """
    def _post_test_procedure_file_fixture(
            test_procedure_id: uuid.UUID,
            user_name: str | None,
            **kwargs
    ) -> Response:
        return upload_png_fixture(
            api_path=API_TEMPLATE_FILE_PREFIX + f"/{test_procedure_id}" + API_FILE_SUFFIX,
            user_name=user_name,
            **kwargs,
        )
    yield _post_test_procedure_file_fixture
