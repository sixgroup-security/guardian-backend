# This file is part of Guardian.
#
# Guardian is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Guardian is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.

import uuid
import json
import pytest
from typing import Dict
from fastapi import Response
from schema.util import ApiPermissionEnum
from schema.reporting.report import Report, ReportCreate, ReportUpdate, ReportTemplateFileVersion
from test_api import TEST_USERS, client
from routers.reporting.pentest_report import API_PENTEST_REPORT_PREFIX
from sqlalchemy.orm import Session

__author__ = "Lukas Reiter"
__copyright__ = "Copyright (C) 2024 Lukas Reiter"
__license__ = "GPLv3"


@pytest.fixture
def get_report_fixture(db_session):
    """
    Fixture factory/closure that provides a function to create a new report.
    """
    def get_create_report(
            project_id: uuid.UUID,
            report_template_id: uuid.UUID,
            report_language_id: uuid.UUID,
            executive_summary: str | None = None,
            prefix_section_text: str | None = None,
            postfix_section_text: str | None = None
    ) -> Dict:
        data = {
            "project_id": project_id,
            "report_template_id": report_template_id,
            "version": ReportTemplateFileVersion.v1.value,
            "report_language_id": report_language_id,
            "executive_summary": executive_summary if executive_summary else str(uuid.uuid4()),
            "prefix_section_text": prefix_section_text if prefix_section_text else str(uuid.uuid4()),
            "postfix_section_text": postfix_section_text if postfix_section_text else str(uuid.uuid4())
        }
        return data
    yield get_create_report


@pytest.fixture
def create_pentest_report_fixture():
    """
    Fixture factory/closure that creates a new report in the database.
    """
    def _create_report(
            session: Session,
            **kwargs,
    ) -> Report:
        raise NotImplementedError()
    yield _create_report


@pytest.fixture
def pentest_report_read_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.pentest_report_read])
    yield _permission_fixture


@pytest.fixture
def pentest_report_create_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.pentest_report_create])
    yield _permission_fixture


@pytest.fixture
def pentest_report_update_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that updates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.pentest_report_update])
    yield _permission_fixture


@pytest.fixture
def pentest_report_delete_permission_fixture(permission_fixture):
    """
    Fixture factory/closure that creates a permission.
    """
    def _permission_fixture(user_name: str) -> bool:
        return permission_fixture(user_name, [ApiPermissionEnum.pentest_report_delete])
    yield _permission_fixture


@pytest.fixture
def post_pentest_report_fixture(db_session):
    """
    Fixture factory/closure that creates a new pentest report via the REST API.
    """
    def _post_pentest_report_fixture(user_name: str | None, project_id: uuid.UUID, data: Dict) -> Response:
        report = ReportCreate(**data)
        payload = json.loads(report.json(by_alias=True))
        response = client.post(
            API_PENTEST_REPORT_PREFIX.format(project_id=project_id),
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _post_pentest_report_fixture


@pytest.fixture
def put_pentest_report_fixture(db_session):
    """
    Fixture factory/closure that updates an existing pentest report via the REST API.
    """
    def _put_pentest_report_fixture(user_name: str | None, project_id: uuid.UUID, data: Dict) -> Response:
        report = ReportUpdate(**data)
        payload = json.loads(report.json(by_alias=True))
        response = client.put(
            API_PENTEST_REPORT_PREFIX.format(project_id=project_id),
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None,
            json=payload
        )
        return response
    yield _put_pentest_report_fixture


@pytest.fixture
def delete_pentest_report_fixture():
    """
    Fixture factory/closure that deletes an pentest report via the REST API.
    """
    def _delete_pentest_report_fixture(
            user_name: str | None,
            project_id: uuid.UUID,
            report_id: uuid.UUID
    ) -> Response:
        response = client.delete(
            API_PENTEST_REPORT_PREFIX.format(project_id=project_id) + f"/{report_id}",
            headers=TEST_USERS[user_name].get_authentication_header() if user_name else None
        )
        return response
    yield _delete_pentest_report_fixture
